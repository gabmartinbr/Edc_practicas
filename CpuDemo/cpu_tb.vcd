$date
	Thu Oct 31 17:29:46 2024
$end
$version
	Icarus Verilog
$end
$timescale
	10ps
$end
$scope module cpu_tb $end
$scope module micpu $end
$scope module camdat $end
$scope module regs $end
$var reg 8 ! \R[1] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module micpu $end
$scope module camdat $end
$scope module regs $end
$var reg 8 " \R[2] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module micpu $end
$scope module camdat $end
$scope module regs $end
$var reg 8 # \R[3] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module micpu $end
$scope module camdat $end
$scope module regs $end
$var reg 8 $ \R[4] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module micpu $end
$scope module camdat $end
$scope module regs $end
$var reg 8 % \R[5] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module micpu $end
$scope module camdat $end
$scope module regs $end
$var reg 8 & \R[6] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module micpu $end
$scope module camdat $end
$scope module regs $end
$var reg 8 ' \R[7] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module micpu $end
$scope module camdat $end
$scope module regs $end
$var reg 8 ( \R[8] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module micpu $end
$scope module camdat $end
$scope module regs $end
$var reg 8 ) \R[9] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module micpu $end
$scope module camdat $end
$scope module regs $end
$var reg 8 * \R[10] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module micpu $end
$scope module camdat $end
$scope module regs $end
$var reg 8 + \R[11] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module micpu $end
$scope module camdat $end
$scope module regs $end
$var reg 8 , \R[12] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module micpu $end
$scope module camdat $end
$scope module regs $end
$var reg 8 - \R[13] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module micpu $end
$scope module camdat $end
$scope module regs $end
$var reg 8 . \R[14] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module micpu $end
$scope module camdat $end
$scope module regs $end
$var reg 8 / \R[15] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$var parameter 32 0 CYCLE $end
$var reg 1 1 clk $end
$var reg 1 2 reset $end
$var integer 32 3 idx [31:0] $end
$var integer 32 4 n [31:0] $end
$scope module micpu $end
$var wire 1 1 clk $end
$var wire 1 2 reset $end
$var wire 1 5 zero $end
$var wire 1 6 wez $end
$var wire 1 7 we $end
$var wire 1 8 s_inm $end
$var wire 1 9 s_inc $end
$var wire 6 : Opcode [5:0] $end
$var wire 3 ; ALUOp [2:0] $end
$scope module camdat $end
$var wire 1 1 clk $end
$var wire 1 2 reset $end
$var wire 1 < zalu $end
$var wire 1 5 z $end
$var wire 8 = wreg [7:0] $end
$var wire 1 6 wez $end
$var wire 1 7 we3 $end
$var wire 8 > salu [7:0] $end
$var wire 1 8 s_inm $end
$var wire 1 9 s_inc $end
$var wire 8 ? reg2 [7:0] $end
$var wire 8 @ reg1 [7:0] $end
$var wire 10 A pc_sig [9:0] $end
$var wire 10 B pc_inc [9:0] $end
$var wire 10 C pc_act [9:0] $end
$var wire 16 D instruc [15:0] $end
$var wire 6 E Opcode [5:0] $end
$var wire 3 F Op [2:0] $end
$scope module ffz $end
$var wire 1 1 clk $end
$var wire 1 2 reset $end
$var wire 1 < d $end
$var wire 1 6 carga $end
$var reg 1 5 q $end
$upscope $end
$scope module incpc $end
$var wire 10 G B [9:0] $end
$var wire 10 H Y [9:0] $end
$var wire 10 I A [9:0] $end
$upscope $end
$scope module mem $end
$var wire 16 J Data [15:0] $end
$var wire 1 1 clk $end
$var wire 10 K Address [9:0] $end
$upscope $end
$scope module mialu $end
$var wire 3 L Op [2:0] $end
$var wire 8 M B [7:0] $end
$var wire 8 N A [7:0] $end
$var reg 8 O S [7:0] $end
$var reg 1 < zero $end
$upscope $end
$scope module mux_pc $end
$var wire 10 P D0 [9:0] $end
$var wire 10 Q D1 [9:0] $end
$var wire 1 9 s $end
$var wire 10 R Y [9:0] $end
$var parameter 32 S WIDTH $end
$upscope $end
$scope module mux_wreg $end
$var wire 8 T D0 [7:0] $end
$var wire 8 U D1 [7:0] $end
$var wire 1 8 s $end
$var wire 8 V Y [7:0] $end
$var parameter 32 W WIDTH $end
$upscope $end
$scope module pc $end
$var wire 10 X D [9:0] $end
$var wire 1 1 clk $end
$var wire 1 2 reset $end
$var parameter 32 Y WIDTH $end
$var reg 10 Z Q [9:0] $end
$upscope $end
$scope module regs $end
$var wire 4 [ RA1 [3:0] $end
$var wire 4 \ RA2 [3:0] $end
$var wire 4 ] WA3 [3:0] $end
$var wire 8 ^ WD3 [7:0] $end
$var wire 1 1 clk $end
$var wire 1 7 we3 $end
$var wire 8 _ RD2 [7:0] $end
$var wire 8 ` RD1 [7:0] $end
$upscope $end
$upscope $end
$scope module undcon $end
$var wire 6 a Opcode [5:0] $end
$var wire 1 5 zero $end
$var parameter 32 b HALF_CYCLE $end
$var reg 3 c ALUOp [2:0] $end
$var reg 1 9 s_inc $end
$var reg 1 8 s_inm $end
$var reg 1 7 we $end
$var reg 1 6 wez $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1010 b
b1010 Y
b1000 W
b1010 S
b10100 0
$end
#0
$dumpvars
bx c
b10000 a
b0 `
b0 _
bx ^
b101 ]
b0 \
b0 [
b0 Z
b0x01 X
bx V
b0 U
bx T
b0x01 R
b1 Q
b101 P
bx O
b0 N
b0 M
bx L
b0 K
b100000000000101 J
b0 I
b1 H
b1 G
bx F
b10000 E
b100000000000101 D
b0 C
b1 B
b0x01 A
b0 @
b0 ?
bx >
bx =
x<
bx ;
b10000 :
x9
x8
x7
x6
05
b1110 4
b10000 3
12
11
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
b0 &
b0 %
b0 $
b0 #
b0 "
b0 !
$end
#500
02
#1000
b0 =
b0 V
b0 ^
1<
b0 >
b0 O
b0 T
b101 A
b101 R
b101 X
b0 ;
b0 F
b0 L
b0 c
06
07
08
09
01
#2000
b10 A
b10 R
b10 X
b100 :
b100 E
b100 a
b10 P
b10 ]
b1000000000010 D
b1000000000010 J
b110 B
b110 H
b110 Q
b101 C
b101 I
b101 K
b101 Z
11
#3000
b110 A
b110 R
b110 X
17
18
19
01
#4000
b10 =
b10 V
b10 ^
b100001 P
b10 U
b1 ]
b10 \
b111 A
b111 R
b111 X
b1000000100001 D
b1000000100001 J
b111 B
b111 H
b111 Q
b110 C
b110 I
b110 K
b110 Z
b0 "
11
#5000
01
#6000
b100 =
b100 V
b100 ^
b1000011 P
b100 U
b11 ]
b100 \
b1000 A
b1000 R
b1000 X
b1000001000011 D
b1000001000011 J
b1000 B
b1000 H
b1000 Q
b111 C
b111 I
b111 K
b111 Z
b10 !
11
#7000
01
#8000
b1 =
b1 V
b1 ^
b10 ?
b10 M
b10 _
b10100 P
b1 U
b100 ]
b1 \
b1001 A
b1001 R
b1001 X
b1000000010100 D
b1000000010100 J
b1001 B
b1001 H
b1001 Q
b1000 C
b1000 I
b1000 K
b1000 Z
b100 #
11
#9000
01
#10000
b100011 =
b100011 V
b100011 ^
b100 ?
b100 M
b100 _
b101000 :
b101000 E
b101000 a
b1000110010 P
b100011 U
b10 ]
b11 \
b10 [
b1010 A
b1010 R
b1010 X
b1010001000110010 D
b1010001000110010 J
b1010 B
b1010 H
b1010 Q
b1001 C
b1001 I
b1001 K
b1001 Z
b1 $
11
#11000
0<
b100 >
b100 O
b100 T
b100 =
b100 V
b100 ^
b10 ;
b10 F
b10 L
b10 c
16
08
01
#12000
b11 =
b11 V
b11 ^
b1 ?
b1 M
b1 _
b11 >
b11 O
b11 T
b101100 :
b101100 E
b101100 a
b101000001 P
b10100 U
b1 ]
b100 \
b1 [
b1011 A
b1011 R
b1011 X
b10 @
b10 N
b10 `
b1011000101000001 D
b1011000101000001 J
b1011 B
b1011 H
b1011 Q
b1010 C
b1010 I
b1010 K
b1010 Z
b100 "
11
#13000
b1 =
b1 V
b1 ^
b1 >
b1 O
b1 T
b11 ;
b11 F
b11 L
b11 c
01
#14000
b0 =
b0 V
b0 ^
b0 ?
b0 M
b0 _
1<
b0 >
b0 O
b0 T
b10010 :
b10010 E
b10010 a
b1001 P
b10000000 U
b1001 ]
b0 \
b1000 [
b1100 A
b1100 R
b1100 X
b0 @
b0 N
b0 `
b100100000001001 D
b100100000001001 J
b1100 B
b1100 H
b1100 Q
b1011 C
b1011 I
b1011 K
b1011 Z
b1 !
11
#15000
b1001 A
b1001 R
b1001 X
09
b0 ;
b0 F
b0 L
b0 c
06
07
01
#16000
b100 =
b100 V
b100 ^
0<
b100 >
b100 O
b100 T
b1000110010 A
b1000110010 R
b1000110010 X
b100 ?
b100 M
b100 _
b100 @
b100 N
b100 `
b101000 :
b101000 E
b101000 a
b1000110010 P
b100011 U
b10 ]
b11 \
b10 [
b1010001000110010 D
b1010001000110010 J
b1010 B
b1010 H
b1010 Q
b1001 C
b1001 I
b1001 K
b1001 Z
11
#17000
b1000 =
b1000 V
b1000 ^
b1000 >
b1000 O
b1000 T
b1010 A
b1010 R
b1010 X
b10 ;
b10 F
b10 L
b10 c
16
17
19
01
#18000
b10 =
b10 V
b10 ^
b1 ?
b1 M
b1 _
b10 >
b10 O
b10 T
b101100 :
b101100 E
b101100 a
b101000001 P
b10100 U
b1 ]
b100 \
b1 [
b1011 A
b1011 R
b1011 X
b1 @
b1 N
b1 `
b1011000101000001 D
b1011000101000001 J
b1011 B
b1011 H
b1011 Q
b1010 C
b1010 I
b1010 K
b1010 Z
b1000 "
11
#19000
b0 =
b0 V
b0 ^
1<
b0 >
b0 O
b0 T
b11 ;
b11 F
b11 L
b11 c
01
#20000
b0 =
b0 V
b0 ^
b0 ?
b0 M
b0 _
1<
b0 >
b0 O
b0 T
b10010 :
b10010 E
b10010 a
b1001 P
b10000000 U
b1001 ]
b0 \
b1000 [
b1100 A
b1100 R
b1100 X
b0 @
b0 N
b0 `
15
b100100000001001 D
b100100000001001 J
b1100 B
b1100 H
b1100 Q
b1011 C
b1011 I
b1011 K
b1011 Z
b0 !
11
#21000
b0 ;
b0 F
b0 L
b0 c
06
07
01
#22000
b10000 :
b10000 E
b10000 a
b1100 P
b0 U
b1100 ]
b0 [
b1101 A
b1101 R
b1101 X
b100000000001100 D
b100000000001100 J
b1101 B
b1101 H
b1101 Q
b1100 C
b1100 I
b1100 K
b1100 Z
11
#23000
b1100 A
b1100 R
b1100 X
09
01
#24000
11
#25000
01
#26000
11
#27000
01
#28000
11
